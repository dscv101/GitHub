name: CI - Jujitsu & Nix

on:
  push:
    branches: [main, develop]
  pull_request:
  workflow_dispatch:

# SECURITY: Minimal permissions, explicit per-job
permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # SECURITY: Secure Nix evaluation with flake-parts support
  NIX_CONFIG: |
    extra-experimental-features = nix-command flakes
    sandbox = true
    max-jobs = auto
    keep-outputs = true
    keep-derivations = true
  # Jujitsu configuration for CI
  JJ_USER: "GitHub Actions"
  JJ_EMAIL: "actions@github.com"
  JJ_LOG: "info"

jobs:
  # Jujitsu repository validation and setup
  jujitsu-setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    outputs:
      jj-available: ${{ steps.check-jj.outputs.available }}
      repo-status: ${{ steps.jj-status.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          # Fetch full history for Jujitsu operations
          fetch-depth: 0

      - name: Install Jujitsu
        run: |
          # Install Rust and Jujitsu
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          cargo install --locked jj-cli
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure Jujitsu
        run: |
          jj config set --user user.name "$JJ_USER"
          jj config set --user user.email "$JJ_EMAIL"
          jj config set --user ui.color "always"

      - name: Initialize Jujitsu repository
        run: |
          # Initialize co-located Jujitsu repository if not already present
          if [[ ! -d .jj ]]; then
            jj git init --colocate
            echo "Initialized co-located Jujitsu repository"
          else
            echo "Jujitsu repository already initialized"
          fi

      - name: Check Jujitsu availability
        id: check-jj
        run: |
          if command -v jj >/dev/null 2>&1; then
            echo "available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Jujitsu available: $(jj --version)"
          else
            echo "available=false" >> $GITHUB_OUTPUT
            echo "‚ùå Jujitsu not available"
            exit 1
          fi

      - name: Jujitsu repository status
        id: jj-status
        run: |
          status_output=$(jj status)
          echo "status=ok" >> $GITHUB_OUTPUT
          echo "üìä Repository status:"
          echo "$status_output"

  # Nix flake validation with flake-parts compliance
  nix-validation:
    runs-on: ubuntu-latest
    needs: jujitsu-setup
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
    outputs:
      flake-exists: ${{ steps.check-flake.outputs.exists }}
      has-checks: ${{ steps.check-flake.outputs.has-checks }}
      has-devshells: ${{ steps.check-flake.outputs.has-devshells }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Check flake health
        uses: DeterminateSystems/flake-checker-action@v9
        with:
          fail-mode: true

      - name: Validate flake structure
        id: check-flake
        run: |
          if [[ -f flake.nix ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ flake.nix found"
            
            # Check for flake-parts usage (organization requirement)
            if grep -q "flake-parts" flake.nix; then
              echo "‚úÖ flake-parts detected (organization compliant)"
            else
              echo "‚ö†Ô∏è  flake-parts not detected - may not comply with organization rules"
            fi
            
            # Check for required outputs
            flake_outputs=$(nix flake show --json . 2>/dev/null || echo '{}')
            
            # Check for checks in any system
            if echo "$flake_outputs" | jq -e '.checks // empty | length > 0' >/dev/null 2>&1; then
              echo "has-checks=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Checks available"
            else
              echo "has-checks=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è  No checks found"
            fi
            
            # Check for devShells OR devenv shells
            has_devshells=false
            if echo "$flake_outputs" | jq -e '.devShells // empty | length > 0' >/dev/null 2>&1; then
              has_devshells=true
              echo "‚úÖ Standard development shells available"
            elif echo "$flake_outputs" | jq -e '.devenv // empty | length > 0' >/dev/null 2>&1; then
              has_devshells=true
              echo "‚úÖ Devenv development shells available"
            fi
            
            if [[ "$has_devshells" == "true" ]]; then
              echo "has-devshells=true" >> $GITHUB_OUTPUT
            else
              echo "has-devshells=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è  No development shells found"
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå flake.nix not found"
            exit 1
          fi

      - name: Validate flake inputs
        run: |
          echo "üì¶ Flake inputs:"
          nix flake metadata --json . | jq -r '.locks.nodes.root.inputs | keys[]' | while read input; do
            echo "  - $input"
          done

      - name: Check flake evaluation
        run: |
          echo "üîç Testing flake evaluation..."
          nix flake check --no-build --print-build-logs

  # Nix formatting and linting (organization requirement)
  nix-formatting:
    runs-on: ubuntu-latest
    needs: nix-validation
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Check Nix formatting
        run: |
          echo "üé® Checking Nix formatting..."
          if command -v nix fmt >/dev/null 2>&1; then
            # Use flake's formatter if available
            nix fmt -- --check .
          else
            # Fallback to alejandra
            nix run nixpkgs#alejandra -- --check .
          fi

      - name: Run statix (Nix linting)
        run: |
          echo "üîç Running statix linting..."
          nix run nixpkgs#statix -- check .

      - name: Run deadnix (dead code detection)
        run: |
          echo "üßπ Running deadnix..."
          nix run nixpkgs#deadnix -- --check .

  # Development shell validation
  dev-shell-validation:
    runs-on: ubuntu-latest
    needs: nix-validation
    if: needs.nix-validation.outputs.has-devshells == 'true'
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Test development shell
        run: |
          echo "üõ†Ô∏è  Testing development shell..."
          
          # Try devenv shell first, then fallback to standard nix develop
          if nix run .#devenv.shells.default.shell --command bash -c "echo '‚úÖ Devenv shell activated'" 2>/dev/null; then
            echo "Using devenv shell..."
            nix run .#devenv.shells.default.shell --command bash -c "
              echo '‚úÖ Development shell activated (devenv)'
              echo 'Available tools:'
              which nix || echo '  - nix: not available'
              which jj || echo '  - jj: not available' 
              which just || echo '  - just: not available'
              which direnv || echo '  - direnv: not available'
              which alejandra || echo '  - alejandra: not available'
              which statix || echo '  - statix: not available'
              which deadnix || echo '  - deadnix: not available'
            "
          elif nix develop --command bash -c "echo '‚úÖ Standard shell activated'" 2>/dev/null; then
            echo "Using standard nix develop..."
            nix develop --command bash -c "
              echo '‚úÖ Development shell activated (standard)'
              echo 'Available tools:'
              which nix || echo '  - nix: not available'
              which jj || echo '  - jj: not available' 
              which just || echo '  - just: not available'
              which direnv || echo '  - direnv: not available'
            "
          else
            echo "‚ùå No development shell available"
            exit 1
          fi

  # Run Nix checks (organization requirement)
  nix-checks:
    runs-on: ubuntu-latest
    needs: nix-validation
    if: needs.nix-validation.outputs.has-checks == 'true'
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Run Nix checks
        run: |
          echo "‚úÖ Running Nix flake checks..."
          nix flake check --print-build-logs

  # Summary job
  ci-summary:
    runs-on: ubuntu-latest
    needs: [jujitsu-setup, nix-validation, nix-formatting, dev-shell-validation, nix-checks]
    if: always()
    permissions:
      contents: read
    steps:
      - name: CI Summary
        run: |
          echo "## üìä CI Summary"
          echo ""
          echo "### Jujitsu Setup"
          if [[ "${{ needs.jujitsu-setup.result }}" == "success" ]]; then
            echo "‚úÖ Jujitsu setup successful"
          else
            echo "‚ùå Jujitsu setup failed"
          fi
          
          echo ""
          echo "### Nix Validation"
          if [[ "${{ needs.nix-validation.result }}" == "success" ]]; then
            echo "‚úÖ Nix validation successful"
            echo "  - Flake exists: ${{ needs.nix-validation.outputs.flake-exists }}"
            echo "  - Has checks: ${{ needs.nix-validation.outputs.has-checks }}"
            echo "  - Has dev shells: ${{ needs.nix-validation.outputs.has-devshells }}"
          else
            echo "‚ùå Nix validation failed"
          fi
          
          echo ""
          echo "### Formatting & Linting"
          if [[ "${{ needs.nix-formatting.result }}" == "success" ]]; then
            echo "‚úÖ Formatting and linting passed"
          else
            echo "‚ùå Formatting and linting failed"
          fi
          
          echo ""
          echo "### Development Shell"
          if [[ "${{ needs.dev-shell-validation.result }}" == "success" ]]; then
            echo "‚úÖ Development shell validation passed"
          elif [[ "${{ needs.dev-shell-validation.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è  Development shell validation skipped (no dev shells)"
          else
            echo "‚ùå Development shell validation failed"
          fi
          
          echo ""
          echo "### Nix Checks"
          if [[ "${{ needs.nix-checks.result }}" == "success" ]]; then
            echo "‚úÖ Nix checks passed"
          elif [[ "${{ needs.nix-checks.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è  Nix checks skipped (no checks defined)"
          else
            echo "‚ùå Nix checks failed"
          fi
