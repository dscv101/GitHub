name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  nix-flake-check:
    name: Nix Flake Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: devenv
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Run nix flake check
        run: |
          echo "üîç Running nix flake check..."
          nix -L flake check --show-trace
          echo "‚úÖ Nix flake check completed successfully!"

  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: devenv
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Check formatting with treefmt
        run: |
          echo "üé® Checking code formatting..."
          nix develop --command treefmt --check
          echo "‚úÖ Format check completed!"

  lint-checks:
    name: Lint Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: devenv
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Run Nix linting with statix
        run: |
          echo "üîç Running statix check..."
          nix develop --command statix check
          echo "‚úÖ Statix check completed!"

      - name: Check for dead code with deadnix
        run: |
          echo "üîç Checking for dead code..."
          nix develop --command deadnix
          echo "‚úÖ Dead code check completed!"

      - name: Lint shell scripts
        run: |
          echo "üîç Linting shell scripts..."
          if ls scripts/*.sh 1> /dev/null 2>&1; then
            nix develop --command shellcheck scripts/*.sh
            echo "‚úÖ Shell script linting completed!"
          else
            echo "‚ÑπÔ∏è No shell scripts found to lint"
          fi

      - name: Lint Markdown files
        run: |
          echo "üîç Linting Markdown files..."
          nix develop --command markdownlint *.md
          echo "‚úÖ Markdown linting completed!"

      - name: Lint YAML files
        run: |
          echo "üîç Linting YAML files..."
          nix develop --command yamllint .
          echo "‚úÖ YAML linting completed!"

      - name: Lint GitHub Actions
        run: |
          echo "üîç Linting GitHub Actions..."
          nix develop --command actionlint
          echo "‚úÖ GitHub Actions linting completed!"

  build-systems:
    name: Build NixOS Systems
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        system: [x86_64-linux]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: devenv
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Build NixOS configurations
        run: |
          echo "üèóÔ∏è Building NixOS configurations for ${{ matrix.system }}..."
          
          # Get list of available NixOS configurations
          if [ -d "systems" ]; then
            for config in systems/*.nix; do
              if [ -f "$config" ]; then
                config_name=$(basename "$config" .nix)
                echo "Building nixosConfigurations.$config_name..."
                nix build ".#nixosConfigurations.$config_name.config.system.build.toplevel" --show-trace
              fi
            done
          else
            echo "‚ÑπÔ∏è No systems directory found, checking for default configuration..."
            nix build ".#nixosConfigurations.default.config.system.build.toplevel" --show-trace || echo "No default configuration found"
          fi
          
          echo "‚úÖ NixOS system builds completed!"

  build-home-manager:
    name: Build Home Manager Configurations
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        system: [x86_64-linux]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: devenv
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Build Home Manager configurations
        run: |
          echo "üè† Building Home Manager configurations for ${{ matrix.system }}..."
          
          # Try to build home manager configurations if they exist
          if [ -d "home" ]; then
            # Check if homeConfigurations are available in flake outputs
            if nix eval ".#homeConfigurations" --json >/dev/null 2>&1; then
              nix eval ".#homeConfigurations" --json | jq -r 'keys[]' | while read config; do
                echo "Building homeConfigurations.$config..."
                nix build ".#homeConfigurations.$config.activationPackage" --show-trace
              done
            else
              echo "‚ÑπÔ∏è No homeConfigurations found in flake outputs"
            fi
          else
            echo "‚ÑπÔ∏è No home directory found"
          fi
          
          echo "‚úÖ Home Manager builds completed!"

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Check for secrets in repository
        run: |
          echo "üîí Checking for potential secrets..."
          
          # Check for common secret patterns
          if grep -r -i "password\|secret\|key\|token" --include="*.nix" --include="*.yaml" --include="*.yml" . | grep -v "sops\|age\|encrypted"; then
            echo "‚ö†Ô∏è Potential secrets found! Please review the above matches."
            echo "Make sure all secrets are properly encrypted with sops-nix or similar."
          else
            echo "‚úÖ No obvious secrets found in plaintext"
          fi

      - name: Validate sops files
        run: |
          echo "üîê Validating sops encrypted files..."
          
          if [ -d "secrets" ]; then
            find secrets -name "*.yaml" -o -name "*.yml" -o -name "*.json" | while read file; do
              echo "Checking $file..."
              if grep -q "sops:" "$file"; then
                echo "‚úÖ $file appears to be properly encrypted with sops"
              else
                echo "‚ö†Ô∏è $file may not be encrypted with sops"
              fi
            done
          else
            echo "‚ÑπÔ∏è No secrets directory found"
          fi

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required documentation
        run: |
          echo "üìö Checking documentation completeness..."
          
          # Check for README
          if [ -f "README.md" ]; then
            echo "‚úÖ README.md found"
          else
            echo "‚ùå README.md missing"
            exit 1
          fi
          
          # Check for docs directory
          if [ -d "docs" ]; then
            echo "‚úÖ docs/ directory found"
            
            # Check for common documentation files
            for doc in "bootstrap.md" "installation.md" "configuration.md"; do
              if find docs -name "$doc" -o -name "${doc%.*}.*" | grep -q .; then
                echo "‚úÖ Found documentation: $doc"
              else
                echo "‚ÑπÔ∏è Optional documentation not found: $doc"
              fi
            done
          else
            echo "‚ÑπÔ∏è docs/ directory not found (optional)"
          fi
          
          echo "‚úÖ Documentation check completed!"

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [nix-flake-check, format-check, lint-checks]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: devenv
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Test development shell
        run: |
          echo "üß™ Testing development shell..."
          nix develop --command echo "Development shell works!"
          echo "‚úÖ Development shell test completed!"

      - name: Run custom tests if available
        run: |
          echo "üß™ Running custom tests..."
          
          if [ -d "tests" ]; then
            echo "Found tests directory, running tests..."
            if [ -f "tests/run.sh" ]; then
              nix develop --command bash tests/run.sh
            elif [ -f "tests/default.nix" ]; then
              nix build ".#checks.x86_64-linux.tests" --show-trace
            else
              echo "‚ÑπÔ∏è Tests directory found but no test runner detected"
            fi
          else
            echo "‚ÑπÔ∏è No tests directory found"
          fi
          
          echo "‚úÖ Custom tests completed!"
