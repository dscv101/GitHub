name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

# SECURITY: Minimal permissions, explicit per-job
permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # SECURITY: Restrict Nix evaluation
  NIX_CONFIG: |
    extra-experimental-features = nix-command flakes
    restrict-eval = true
    sandbox = true
    max-jobs = auto

jobs:
  # Combined flake validation and basic checks
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
    outputs:
      config-exists: ${{ steps.check-config.outputs.exists }}
      has-checks: ${{ steps.check-config.outputs.has-checks }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit
          disable-sudo: true

      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1
        with:
          # Disable KVM to avoid sudo requirements (compatible with harden-runner disable-sudo)
          kvm: false
          # Use linux-multi planner with no init to avoid sudo requirements
          planner: linux-multi
          init: none
          # Force disable systemd integration to avoid permission issues
          force-no-systemd: true

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@565684385bcd71bad329742eefe8d12f2e765b39 # v13

      # SECURITY: Enhanced flake health check
      - name: Check flake health
        uses: DeterminateSystems/flake-checker-action@3164002371bc90729c68af0e24d5aacf20d7c9f6 # v12
        with:
          fail-mode: true

      - name: Validate flake structure
        id: check-config
        run: |
          echo "üîç Validating flake and configuration..."
          
          # Check flake validity
          if ! nix flake check --show-trace; then
            echo "‚ùå Flake check failed"
            exit 1
          fi
          
          # Check for NixOS configuration
          if nix eval --json .#nixosConfigurations --option restrict-eval true >/dev/null 2>&1; then
            echo "config-exists=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ NixOS configurations found"
            
            # Try to build system configuration
            if nix build .#nixosConfigurations.blazar.config.system.build.toplevel --show-trace --option restrict-eval true --dry-run; then
              echo "‚úÖ System configuration is buildable"
            else
              echo "‚ùå System configuration build failed"
              exit 1
            fi
          else
            echo "config-exists=false" >> "$GITHUB_OUTPUT"
            echo "‚ÑπÔ∏è No NixOS configurations found"
          fi
          
          # Check for validation targets
          if nix eval --json .#checks.x86_64-linux --option restrict-eval true >/dev/null 2>&1; then
            echo "has-checks=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Validation checks available"
          else
            echo "has-checks=false" >> "$GITHUB_OUTPUT"
            echo "‚ÑπÔ∏è No validation checks found"
          fi

      # SECURITY: Validate dependencies and inputs
      - name: Security validation
        run: |
          echo "üîí Running security validation..."
          
          # Check for insecure Nix features
          if grep -r "allowUnfree\|allowBroken\|allowInsecure" . --include="*.nix" --exclude-dir=".git"; then
            echo "‚ö†Ô∏è Insecure Nix features detected"
            exit 1
          fi
          
          # Validate flake inputs are from trusted sources  
          nix flake metadata --json > flake-meta.json
          untrusted_count=0
          while read -r owner repo; do
            case "$owner" in
              NixOS|nix-community|cachix|numtide|hercules-ci) 
                echo "‚úÖ Trusted: $owner/$repo" ;;
              *)
                echo "‚ö†Ô∏è Untrusted: $owner/$repo"
                ((untrusted_count++)) ;;
            esac
          done < <(jq -r '.locks.nodes[] | select(.original.owner) | "\(.original.owner) \(.original.repo)"' flake-meta.json)
          
          if [[ $untrusted_count -gt 0 ]]; then
            echo "‚ùå $untrusted_count untrusted inputs found"
            exit 1
          fi
          
          echo "‚úÖ All security checks passed"

  # Code quality and formatting
  code-quality:
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          egress-policy: audit
          disable-sudo: true

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1
        with:
          # Disable KVM to avoid sudo requirements (compatible with harden-runner disable-sudo)
          kvm: false
          # Use linux-multi planner with no init to avoid sudo requirements
          planner: linux-multi
          init: none
          # Force disable systemd integration to avoid permission issues
          force-no-systemd: true

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@565684385bcd71bad329742eefe8d12f2e765b39 # v13

      # IMPROVED: Enhanced formatting checks
      - name: Check code formatting
        run: |
          echo "üé® Checking code formatting..."
          
          # Try treefmt first (modern approach)
          if nix build .#formatter --option restrict-eval true 2>/dev/null; then
            echo "Using treefmt formatter"
            ./result/bin/treefmt --check --no-cache .
          elif nix run nixpkgs#treefmt -- --check --no-cache . 2>/dev/null; then
            echo "Using system treefmt"
          else
            echo "Using alejandra fallback"
            nix run nixpkgs#alejandra -- --check .
          fi

      - name: Lint Nix code
        run: |
          echo "üîç Running Nix linters..."
          
          # Check for dead code
          if command -v deadnix >/dev/null 2>&1; then
            deadnix --fail --exclude flake.nix .
          else
            nix run nixpkgs#deadnix -- --fail --exclude flake.nix .
          fi
          
          # Static analysis
          if command -v statix >/dev/null 2>&1; then
            statix check .
          else
            nix run nixpkgs#statix -- check .
          fi

      # ENHANCED: Better shell script checking
      - name: Check shell scripts
        run: |
          echo "üêö Checking shell scripts..."
          
          shopt -s globstar nullglob
          scripts=(**/*.sh **/scripts/* **/**/scripts/*)
          
          if [[ ${#scripts[@]} -gt 0 ]]; then
            # Check syntax and style
            nix run nixpkgs#shellcheck -- "${scripts[@]}"
            nix run nixpkgs#shfmt -- -d "${scripts[@]}"
            echo "‚úÖ All shell scripts passed checks"
          else
            echo "‚ÑπÔ∏è No shell scripts found"
          fi

      # ENHANCED: Document validation
      - name: Validate documentation
        run: |
          echo "üìö Validating documentation..."
          
          # Check markdown files
          if find . -name "*.md" -not -path "./.git/*" | head -1 | read -r; then
            find . -name "*.md" -not -path "./.git/*" -exec nix run nixpkgs#markdownlint-cli -- {} +
          fi
          
          # Check YAML files
          if find . -name "*.yml" -o -name "*.yaml" -not -path "./.git/*" | head -1 | read -r; then
            nix run nixpkgs#yamllint -- .
          fi

      # ENHANCED: GitHub Actions validation
      - name: Validate GitHub Actions
        if: hashFiles('.github/workflows/*.yml', '.github/workflows/*.yaml') != ''
        run: |
          echo "‚öôÔ∏è Validating GitHub Actions..."
          nix run nixpkgs#actionlint

  # Build validation
  build-validation:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.config-exists == 'true'
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          egress-policy: audit
          disable-sudo: true

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1
        with:
          # Disable KVM to avoid sudo requirements (compatible with harden-runner disable-sudo)
          kvm: false
          # Use linux-multi planner with no init to avoid sudo requirements
          planner: linux-multi
          init: none
          # Force disable systemd integration to avoid permission issues
          force-no-systemd: true

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@565684385bcd71bad329742eefe8d12f2e765b39 # v13

      - name: Build NixOS configuration
        run: |
          echo "üèóÔ∏è Building NixOS configuration..."
          
          # Build system configuration with security restrictions
          nix build \
            .#nixosConfigurations.blazar.config.system.build.toplevel \
            --show-trace \
            --option restrict-eval true \
            --option sandbox true \
            --option max-silent-time 600 \
            --option timeout 1800
          
          echo "‚úÖ System configuration built successfully"
          
          # Show build info
          nix path-info --json result | jq -r '.[] | "Size: \(.narSize) bytes"'

  # Enhanced checks execution
  checks:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.has-checks == 'true'
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          egress-policy: audit
          disable-sudo: true

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1
        with:
          # Disable KVM to avoid sudo requirements (compatible with harden-runner disable-sudo)
          kvm: false
          # Use linux-multi planner with no init to avoid sudo requirements
          planner: linux-multi
          init: none
          # Force disable systemd integration to avoid permission issues
          force-no-systemd: true

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@565684385bcd71bad329742eefe8d12f2e765b39 # v13

      - name: Run validation checks
        run: |
          echo "‚úÖ Running validation checks..."
          
          # Run all available checks
          nix build .#checks.x86_64-linux --show-trace --option restrict-eval true
          
          echo "‚úÖ All checks passed"

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.config-exists == 'true'
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          egress-policy: audit
          disable-sudo: true

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1
        with:
          # Disable KVM to avoid sudo requirements (compatible with harden-runner disable-sudo)
          kvm: false
          # Use linux-multi planner with no init to avoid sudo requirements
          planner: linux-multi
          init: none
          # Force disable systemd integration to avoid permission issues
          force-no-systemd: true

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@565684385bcd71bad329742eefe8d12f2e765b39 # v13

      - name: Quick security scan
        run: |
          echo "üîç Running security scan..."
          
          # Build system for scanning
          nix build .#nixosConfigurations.blazar.config.system.build.toplevel --option restrict-eval true
          system_path=$(readlink -f result)
          
          # Quick vulnerability check
          if command -v vulnix >/dev/null 2>&1; then
            vulnix --system x86_64-linux "$system_path" || echo "‚ö†Ô∏è Vulnerabilities found (non-blocking in CI)"
          else
            nix run nixpkgs#vulnix -- --system x86_64-linux "$system_path" || echo "‚ö†Ô∏è Vulnerabilities found (non-blocking in CI)"
          fi

  # CI summary
  ci-summary:
    runs-on: ubuntu-latest
    needs: [validate, code-quality, build-validation, checks, security-audit]
    if: always()
    permissions:
      contents: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Generate CI summary
        run: |
          {
            echo "# üéØ CI Pipeline Summary"
            echo ""
            echo "## Validation Results"
            echo "- **Flake validation**: ${{ needs.validate.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}"
            echo "- **Code quality**: ${{ needs.code-quality.result == 'success' && '‚úÖ Passed' || needs.code-quality.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}"
            echo "- **Build validation**: ${{ needs.build-validation.result == 'success' && '‚úÖ Passed' || needs.build-validation.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}"
            echo "- **Checks**: ${{ needs.checks.result == 'success' && '‚úÖ Passed' || needs.checks.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}"
            echo "- **Security audit**: ${{ needs.security-audit.result == 'success' && '‚úÖ Passed' || needs.security-audit.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}"
            echo ""
            echo "## Security Features"
            echo "- ‚úÖ SHA-pinned actions (supply chain security)"
            echo "- ‚úÖ Hardened runners (step-security)"
            echo "- ‚úÖ Minimal permissions (RBAC)"
            echo "- ‚úÖ Sandboxed Nix builds"
            echo "- ‚úÖ Dependency validation"
            echo "- ‚úÖ Vulnerability scanning"
            echo ""
            if [[ "${{ needs.validate.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" && ("${{ needs.build-validation.result }}" == "success" || "${{ needs.build-validation.result }}" == "skipped") ]]; then
              echo "üéâ **Overall Status**: All critical checks passed!"
            else
              echo "‚ö†Ô∏è **Overall Status**: Some checks failed - review required"
            fi
            echo ""
            echo "---"
            echo "*Hardened CI pipeline following 2025 security best practices*"
          } >> "$GITHUB_STEP_SUMMARY"
