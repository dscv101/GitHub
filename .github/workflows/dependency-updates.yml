name: Dependency Updates

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        type: choice
        options:
          - all
          - nixpkgs-only
          - security-only
        default: all
      create_pr:
        description: 'Create pull request automatically'
        required: false
        type: boolean
        default: true

# SECURITY: Minimal permissions by default
permissions: {}

concurrency:
  group: dependency-updates
  cancel-in-progress: false  # Don't cancel dependency updates

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write  # For OIDC
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          disable-sudo: true

      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # SECURITY: Use GITHUB_TOKEN for most operations, PAT only if needed
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@565684385bcd71bad329742eefe8d12f2e765b39 # v13

      # ENHANCED: Flake health check before updates
      - name: Pre-update health check
        uses: DeterminateSystems/flake-checker-action@3164002371bc90729c68af0e24d5aacf20d7c9f6 # v12
        with:
          fail-mode: false
        continue-on-error: true

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Capture current state
        id: current_state
        run: |
          echo "üì∏ Capturing current state..."
          
          # Backup current flake.lock
          cp flake.lock flake.lock.backup
          
          # Get metadata
          echo "current_commit=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          
          # Generate input summary with error handling
          if nix flake metadata --json > current-metadata.json 2>/dev/null; then
            jq -r '.locks.nodes | to_entries[] | select(.value.original) | "\(.key): \(.value.locked.rev // .value.locked.narHash // "unknown")[0:8]"' current-metadata.json > current-inputs.txt || echo "Failed to extract inputs" > current-inputs.txt
          else
            echo "Failed to get flake metadata" > current-inputs.txt
          fi
          
          echo "Current inputs:"
          cat current-inputs.txt

      # ENHANCED: Security-focused dependency updates
      - name: Update flake inputs
        id: update_inputs
        run: |
          echo "üîÑ Updating dependencies..."
          update_type="${{ github.event.inputs.update_type || 'all' }}"
          
          # Use the official update action for consistency
          case "$update_type" in
            "nixpkgs-only")
              echo "Updating only nixpkgs..."
              nix flake lock --update-input nixpkgs --option restrict-eval true
              ;;
            "security-only")
              echo "Security-focused updates..."
              # Update critical security-related inputs
              nix flake lock --update-input nixpkgs --option restrict-eval true
              nix flake lock --update-input home-manager --option restrict-eval true || true
              ;;
            "all"|*)
              echo "Updating all inputs..."
              nix flake update --option restrict-eval true
              ;;
          esac
          
          # Check if anything changed
          if diff -q flake.lock flake.lock.backup >/dev/null; then
            echo "changes_detected=false" >> "$GITHUB_OUTPUT"
            echo "No changes detected"
          else
            echo "changes_detected=true" >> "$GITHUB_OUTPUT"
            echo "Changes detected"
          fi

      # ENHANCED: Post-update validation
      - name: Validate updated flake
        if: steps.update_inputs.outputs.changes_detected == 'true'
        id: validate_update
        run: |
          echo "‚úÖ Validating updated flake..."
          
          validation_result="success"
          
          # Check flake structure
          if ! nix flake check --show-trace --option restrict-eval true; then
            echo "‚ùå Flake check failed"
            validation_result="failed"
          fi
          
          # Try building system if it exists
          if nix eval --json .#nixosConfigurations --option restrict-eval true >/dev/null 2>&1; then
            if ! nix build .#nixosConfigurations.blazar.config.system.build.toplevel --show-trace --option restrict-eval true --dry-run; then
              echo "‚ùå System build failed"
              validation_result="failed"
            fi
          fi
          
          echo "validation_result=$validation_result" >> "$GITHUB_OUTPUT"

      # ENHANCED: Security scan of updated dependencies
      - name: Security assessment
        if: steps.update_inputs.outputs.changes_detected == 'true' && steps.validate_update.outputs.validation_result == 'success'
        id: security_scan
        continue-on-error: true
        run: |
          echo "üîí Running security assessment..."
          
          # Check for new untrusted inputs
          nix flake metadata --json > new-metadata.json
          
          untrusted_count=0
          while read -r owner repo; do
            case "$owner" in
              NixOS|nix-community|cachix|numtide|hercules-ci) ;;
              *)
                echo "‚ö†Ô∏è Untrusted input: $owner/$repo"
                ((untrusted_count++)) ;;
            esac
          done < <(jq -r '.locks.nodes[] | select(.original.owner) | "\(.original.owner) \(.original.repo)"' new-metadata.json 2>/dev/null)
          
          echo "untrusted_inputs=$untrusted_count" >> "$GITHUB_OUTPUT"
          
          # Quick vulnerability scan if system exists
          if nix eval --json .#nixosConfigurations --option restrict-eval true >/dev/null 2>&1; then
            if system_path=$(nix build .#nixosConfigurations.blazar.config.system.build.toplevel --print-out-paths --option restrict-eval true 2>/dev/null); then
              if vulnix_output=$(nix run nixpkgs#vulnix -- --system x86_64-linux --json "$system_path" 2>/dev/null); then
                vuln_count=$(echo "$vulnix_output" | jq 'length' 2>/dev/null || echo "0")
                critical_count=$(echo "$vulnix_output" | jq '[.[] | select(.severity == "CRITICAL" or .severity == "HIGH")] | length' 2>/dev/null || echo "0")
                echo "vulnerabilities=$vuln_count" >> "$GITHUB_OUTPUT"
                echo "critical_vulnerabilities=$critical_count" >> "$GITHUB_OUTPUT"
              else
                echo "vulnerabilities=unknown" >> "$GITHUB_OUTPUT"
                echo "critical_vulnerabilities=unknown" >> "$GITHUB_OUTPUT"
              fi
            fi
          fi

      # ENHANCED: Generate comprehensive update summary
      - name: Generate update summary
        if: steps.update_inputs.outputs.changes_detected == 'true'
        run: |
          cat > update-summary.md << 'EOF'
          # üîÑ Dependency Update Report
          
          ## Update Details
          **Type:** ${{ github.event.inputs.update_type || 'all' }}  
          **Date:** $(date)  
          **Validation:** ${{ steps.validate_update.outputs.validation_result }}
          
          ## Security Assessment
          - **Untrusted inputs:** ${{ steps.security_scan.outputs.untrusted_inputs || '0' }}
          - **Vulnerabilities:** ${{ steps.security_scan.outputs.vulnerabilities || 'unknown' }}
          - **Critical/High:** ${{ steps.security_scan.outputs.critical_vulnerabilities || 'unknown' }}
          
          ## Changed Inputs
          
          EOF
          
          # Generate diff of changes
          if [[ -f current-inputs.txt ]] && nix flake metadata --json > new-metadata.json 2>/dev/null; then
            jq -r '.locks.nodes | to_entries[] | select(.value.original) | "\(.key): \(.value.locked.rev // .value.locked.narHash // "unknown")[0:8]"' new-metadata.json > new-inputs.txt
            
            while IFS= read -r line; do
              input_name=$(echo "$line" | cut -d: -f1)
              old_hash=$(echo "$line" | cut -d: -f2 | tr -d ' ')
              new_line=$(grep "^$input_name:" new-inputs.txt 2>/dev/null || echo "$input_name: [removed]")
              new_hash=$(echo "$new_line" | cut -d: -f2 | tr -d ' ')
              
              if [[ "$old_hash" != "$new_hash" ]]; then
                echo "- **$input_name**: \`$old_hash\` ‚Üí \`$new_hash\`" >> update-summary.md
              fi
            done < current-inputs.txt
          else
            echo "- Unable to generate detailed diff" >> update-summary.md
          fi
          
          cat >> update-summary.md << 'EOF'
          
          ## Next Steps
          - [ ] Review security scan results
          - [ ] Test updated configuration
          - [ ] Merge if all checks pass
          
          ---
          *Automated update by [Dependency Updates workflow](https://github.com/${{ github.repository }}/actions/workflows/dependency-updates.yml)*
          EOF

      # SECURITY: Use modern create-pull-request with better security
      - name: Create pull request
        if: steps.update_inputs.outputs.changes_detected == 'true' && steps.validate_update.outputs.validation_result == 'success' && (github.event.inputs.create_pr != 'false')
        id: create_pr
        uses: peter-evans/create-pull-request@5b4a9f6a9e2af26e5f02351490b90d01eb8ec1e5 # v7.0.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update flake inputs (${{ github.event.inputs.update_type || 'all' }})
            
            Update type: ${{ github.event.inputs.update_type || 'all' }}
            Validation: ${{ steps.validate_update.outputs.validation_result }}
            Security scan: ${{ steps.security_scan.outputs.vulnerabilities || 'unknown' }} vulnerabilities
          title: "üîÑ Dependency Update (${{ github.event.inputs.update_type || 'all' }})"
          body-path: update-summary.md
          branch: automated-deps-update-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            ${{ steps.validate_update.outputs.validation_result == 'failed' && 'validation-failed' || '' }}
            ${{ steps.security_scan.outputs.critical_vulnerabilities != '0' && steps.security_scan.outputs.critical_vulnerabilities != 'unknown' && 'security-issues' || '' }}
          draft: ${{ steps.validate_update.outputs.validation_result == 'failed' }}

      # Handle validation failures
      - name: Handle validation failure
        if: steps.update_inputs.outputs.changes_detected == 'true' && steps.validate_update.outputs.validation_result == 'failed'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `‚ùå Dependency Update Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `# ‚ùå Dependency Update Validation Failed
              
              The automated dependency update encountered validation failures.
              
              ## Details
              - **Update Type:** ${{ github.event.inputs.update_type || 'all' }}
              - **Workflow Run:** [View logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ## Next Steps
              1. Review the workflow logs for specific errors
              2. Test the updates locally
              3. Apply fixes manually if needed
              4. Consider updating inputs individually
              
              This issue was automatically created by the dependency update workflow.`,
              labels: ['dependencies', 'failed', 'automated', 'needs-attention']
            });

      # Upload artifacts for debugging
      - name: Upload update artifacts
        if: steps.update_inputs.outputs.changes_detected == 'true'
        uses: actions/upload-artifact@5758c8d99aa7cea1e4a75b12c9d1b8dfa5e8529b # v4.5.0
        with:
          name: dependency-update-${{ github.run_number }}
          path: |
            update-summary.md
            current-inputs.txt
            new-inputs.txt
            current-metadata.json
            new-metadata.json
            flake.lock.backup
          retention-days: 30
          if-no-files-found: warn

      - name: Summary
        run: |
          {
            echo "# üîÑ Dependency Update Summary"
            echo ""
            echo "## Results"
            echo "- **Changes detected:** ${{ steps.update_inputs.outputs.changes_detected }}"
            echo "- **Update type:** ${{ github.event.inputs.update_type || 'all' }}"
            echo "- **Validation:** ${{ steps.validate_update.outputs.validation_result || 'skipped' }}"
            echo "- **PR created:** ${{ steps.create_pr.outputs.pull-request-number || 'none' }}"
            echo ""
            if [[ "${{ steps.update_inputs.outputs.changes_detected }}" == "false" ]]; then
              echo "‚úÖ **Status:** No updates needed - all dependencies current"
            elif [[ "${{ steps.validate_update.outputs.validation_result }}" == "success" ]]; then
              echo "‚úÖ **Status:** Update completed successfully"
              if [[ -n "${{ steps.create_pr.outputs.pull-request-number }}" ]]; then
                echo "üìã **Pull Request:** #${{ steps.create_pr.outputs.pull-request-number }}"
              fi
            else
              echo "‚ùå **Status:** Update failed validation - issue created"
            fi
            echo ""
            echo "## Security"
            echo "- Untrusted inputs: ${{ steps.security_scan.outputs.untrusted_inputs || '0' }}"
            echo "- Vulnerabilities: ${{ steps.security_scan.outputs.vulnerabilities || 'unknown' }}"
            echo ""
            echo "---"
            echo "*Secure dependency management for 2025*"
          } >> "$GITHUB_STEP_SUMMARY"
