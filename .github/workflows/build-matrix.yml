name: Multi-System Build Matrix

on:
  push:
    branches: [main, develop]
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  # Generate build matrix from flake outputs
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3

      - name: Generate build matrix
        id: set-matrix
        run: |
          # Generate matrix for all flake outputs
          matrix=$(nix eval --json .#githubActions.matrix 2>/dev/null || echo '{"include":[{"system":"x86_64-linux","name":"default"}]}')
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  # Build on multiple systems
  build:
    needs: generate-matrix
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Build ${{ matrix.name }} for ${{ matrix.system }}
        run: |
          echo "Building ${{ matrix.name }} for ${{ matrix.system }}"
          if [[ "${{ matrix.system }}" == "$(nix eval --impure --raw --expr 'builtins.currentSystem')" ]]; then
            nix build .#${{ matrix.name }} --print-build-logs
          else
            echo "Cross-compilation for ${{ matrix.system }} not supported on this runner"
          fi

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.system }}-${{ matrix.name }}
          path: result*
          retention-days: 7
