name: Multi-System Build Matrix

on:
  push:
    branches: [main, develop]
  pull_request:
  workflow_dispatch:

# SECURITY: Minimal permissions by default, explicit per-job
permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Enhanced flake validation with security checks
  validate-flake:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write  # For CodeQL if enabled
    outputs:
      flake-exists: ${{ steps.check-flake.outputs.exists }}
      has-packages: ${{ steps.check-flake.outputs.has-packages }}
      available-systems: ${{ steps.check-flake.outputs.systems }}
      security-passed: ${{ steps.security-check.outputs.passed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      # SECURITY: Pin to specific version for supply chain security
      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      # SECURITY: Enhanced flake health check
      - name: Check flake health (security)
        uses: DeterminateSystems/flake-checker-action@v9
        with:
          fail-mode: true

      - name: Validate flake structure
        id: check-flake
        run: |
          # Verify flake.nix exists
          if [[ ! -f "flake.nix" ]]; then
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "has-packages=false" >> "$GITHUB_OUTPUT"
            echo "systems=[]" >> "$GITHUB_OUTPUT"
            echo "‚ùå flake.nix not found"
            exit 1
          fi
          
          echo "exists=true" >> "$GITHUB_OUTPUT"
          
          # Enhanced flake evaluation with security checks
          if ! nix flake show --json > flake-info.json 2>flake-errors.log; then
            echo "‚ùå Flake evaluation failed"
            cat flake-errors.log
            echo "has-packages=false" >> "$GITHUB_OUTPUT"
            echo "systems=[]" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          
          # Validate flake structure
          if jq -e '.packages' flake-info.json >/dev/null; then
            echo "has-packages=true" >> "$GITHUB_OUTPUT"
            systems=$(jq -r '.packages | keys | @json' flake-info.json)
            echo "systems=$systems" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Valid flake with packages"
          else
            echo "has-packages=false" >> "$GITHUB_OUTPUT"
            echo "systems=[]" >> "$GITHUB_OUTPUT"
            echo "‚ö†Ô∏è No packages found"
          fi

      # SECURITY: Enhanced security validation
      - name: Security validation
        id: security-check
        run: |
          echo "üîç Running security checks..."
          
          security_issues=0
          
          # Check for truly unsafe Nix features (allowUnfree is common and acceptable)
          if grep -r "allowBroken\|allowInsecure" . --include="*.nix" --exclude-dir=".git"; then
            echo "‚ö†Ô∏è Unsafe Nix features detected"
            ((security_issues++))
          fi
          
          # Note: allowUnfree is acceptable for systems that need proprietary software
          if grep -r "allowUnfree" . --include="*.nix" --exclude-dir=".git" >/dev/null; then
            echo "‚ÑπÔ∏è allowUnfree detected (acceptable for proprietary software support)"
          fi
          
          # Validate flake inputs are from trusted sources
          if jq -e '.locks.nodes[] | select(.original.owner != "NixOS" and .original.owner != "nix-community" and .original.owner != "cachix")' flake-info.json >/dev/null; then
            echo "‚ö†Ô∏è Non-trusted flake inputs detected"
            jq -r '.locks.nodes[] | select(.original.owner != "NixOS" and .original.owner != "nix-community" and .original.owner != "cachix") | .original.owner + "/" + .original.repo' flake-info.json
            ((security_issues++))
          fi
          
          # Check for stale inputs (>30 days)
          current_date=$(date +%s)
          while read -r input_date; do
            if [[ -n "$input_date" ]] && [[ "$input_date" != "null" ]]; then
              days_old=$(( (current_date - input_date) / 86400 ))
              if [[ $days_old -gt 30 ]]; then
                echo "‚ö†Ô∏è Stale flake input detected ($days_old days old)"
                ((security_issues++))
                break
              fi
            fi
          done < <(jq -r '.locks.nodes[].locked.lastModified // empty' flake-info.json)
          
          if [[ $security_issues -eq 0 ]]; then
            echo "passed=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ All security checks passed"
          else
            echo "passed=false" >> "$GITHUB_OUTPUT"
            echo "‚ùå $security_issues security issues found"
          fi

  # Secure matrix generation
  generate-matrix:
    runs-on: ubuntu-latest
    needs: validate-flake
    if: needs.validate-flake.outputs.flake-exists == 'true' && needs.validate-flake.outputs.security-passed == 'true'
    timeout-minutes: 10
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-builds: ${{ steps.set-matrix.outputs.has-builds }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.2
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Generate secure build matrix
        id: set-matrix
        run: |
          echo "üî® Generating build matrix..."
          
          # Try custom matrix first
          if matrix=$(nix eval --json .#githubActions.matrix 2>/dev/null); then
            echo "‚úÖ Using custom matrix from flake"
            echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
            echo "has-builds=true" >> "$GITHUB_OUTPUT"
          else
            echo "üìã Generating matrix from packages..."
            
            # Create secure matrix from available packages
            nix flake show --json > flake-info.json
            
            matrix_entries=""
            while read -r system; do
              case "$system" in
                x86_64-linux) runner_os="ubuntu-latest" ;;
                aarch64-linux) runner_os="ubuntu-latest" ;;
                x86_64-darwin) runner_os="macos-13" ;;
                aarch64-darwin) runner_os="macos-latest" ;;
                *) continue ;; # Skip unsupported systems
              esac
              
              while read -r package; do
                if [[ -n "$matrix_entries" ]]; then
                  matrix_entries+=","
                fi
                matrix_entries+="{\"system\":\"$system\",\"name\":\"$package\",\"os\":\"$runner_os\"}"
              done < <(jq -r ".packages[\"$system\"] | keys[]" flake-info.json 2>/dev/null)
            done < <(jq -r '.packages | keys[]' flake-info.json 2>/dev/null)
            
            if [[ -n "$matrix_entries" ]]; then
              matrix="{\"include\":[$matrix_entries]}"
              echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
              echo "has-builds=true" >> "$GITHUB_OUTPUT"
              echo "‚úÖ Generated matrix with $(echo "$matrix_entries" | tr ',' '\n' | wc -l) builds"
            else
              echo "matrix={\"include\":[]}" >> "$GITHUB_OUTPUT"
              echo "has-builds=false" >> "$GITHUB_OUTPUT"
              echo "‚ùå No valid packages found"
            fi
          fi

  # Hardened build job
  build:
    needs: [validate-flake, generate-matrix]
    if: needs.generate-matrix.outputs.has-builds == 'true'
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
      max-parallel: 3  # SECURITY: Limit concurrent builds
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45  # SECURITY: Prevent runaway builds
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.2
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Verify build compatibility
        id: compatibility
        run: |
          current_system=$(nix eval --impure --raw --expr 'builtins.currentSystem')
          target_system="${{ matrix.system }}"
          
          echo "Current: $current_system, Target: $target_system"
          
          if [[ "$current_system" == "$target_system" ]]; then
            echo "can-build=true" >> "$GITHUB_OUTPUT"
            echo "build-type=native" >> "$GITHUB_OUTPUT"
          elif [[ "$current_system" == "x86_64-linux" && "$target_system" == "aarch64-linux" ]]; then
            echo "can-build=true" >> "$GITHUB_OUTPUT"
            echo "build-type=cross" >> "$GITHUB_OUTPUT"
          else
            echo "can-build=false" >> "$GITHUB_OUTPUT"
            echo "build-type=unsupported" >> "$GITHUB_OUTPUT"
          fi

      - name: Build package (hardened)
        if: steps.compatibility.outputs.can-build == 'true'
        env:
          NIX_CONFIG: |
            extra-experimental-features = nix-command flakes
            sandbox = true
            max-jobs = auto
        run: |
          echo "üöÄ Building ${{ matrix.name }} for ${{ matrix.system }}"
          
          build_args=(
            "--print-build-logs"
            "--option" "sandbox" "true"
            "--option" "max-silent-time" "600"
            "--option" "timeout" "1800"
          )
          
          if [[ "${{ steps.compatibility.outputs.build-type }}" == "cross" ]]; then
            build_args+=("--system" "${{ matrix.system }}")
          fi
          
          # Build with timeout and resource limits
          timeout 30m nix build ".#${{ matrix.name }}" "${build_args[@]}"
          
          echo "‚úÖ Build completed"
          
          # Basic security scan of build result
          if [[ -L "result" ]]; then
            echo "üìä Build analysis:"
            nix path-info --json result | jq -r '.[] | "Size: \(.narSize) bytes, References: \(.references | length)"'
          fi

      - name: Generate build report
        if: always()
        run: |
          {
            echo "## Build Report: ${{ matrix.name }} (${{ matrix.system }})"
            echo ""
            if [[ "${{ steps.compatibility.outputs.can-build }}" != "true" ]]; then
              echo "‚ùå **Status**: Build not supported on this runner"
            elif [[ "${{ job.status }}" == "success" ]]; then
              echo "‚úÖ **Status**: Build successful"
              echo "- Build type: ${{ steps.compatibility.outputs.build-type }}"
              echo "- Runner: ${{ runner.os }}"
            else
              echo "‚ùå **Status**: Build failed"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      # SECURITY: Enhanced artifact handling
      - name: Upload build artifacts
        if: success() && steps.compatibility.outputs.can-build == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: build-${{ matrix.system }}-${{ matrix.name }}-${{ github.run_number }}
          path: |
            result*
            !result*/**/*.tmp
            !result*/**/*.log
          retention-days: 7
          if-no-files-found: warn
          compression-level: 9

  # Security summary job
  security-summary:
    runs-on: ubuntu-latest
    needs: [validate-flake, generate-matrix, build]
    if: always()
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Generate security summary
        run: |
          {
            echo "# üîí Security & Build Summary"
            echo ""
            echo "## Security Validation"
            if [[ "${{ needs.validate-flake.outputs.security-passed }}" == "true" ]]; then
              echo "‚úÖ All security checks passed"
            else
              echo "‚ùå Security issues detected - builds blocked"
            fi
            echo ""
            echo "## Build Results"
            if [[ "${{ needs.generate-matrix.outputs.has-builds }}" == "true" ]]; then
              if [[ "${{ needs.build.result }}" == "success" ]]; then
                echo "‚úÖ All builds completed successfully"
              else
                echo "‚ö†Ô∏è Some builds failed or were skipped"
              fi
            else
              echo "üö´ No builds executed"
            fi
            echo ""
            echo "## Security Features Active"
            echo "- ‚úÖ Supply chain pinning (SHA-pinned actions)"
            echo "- ‚úÖ Minimal permissions (per-job RBAC)"
            echo "- ‚úÖ Secure runner configuration"
            echo "- ‚úÖ Sandboxed Nix builds"
            echo "- ‚úÖ Flake security validation"
            echo "- ‚úÖ Stale dependency detection"
            echo ""
            echo "---"
            echo "*Built with security-first practices for 2025*"
          } >> "$GITHUB_STEP_SUMMARY"
