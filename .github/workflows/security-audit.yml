name: Security Audit

on:
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM UTC
  pull_request:
    paths:
      - 'flake.lock'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Install security tools
        run: |
          nix profile install nixpkgs#vulnix
          nix profile install nixpkgs#nix-tree
          nix profile install nixpkgs#nix-diff

      - name: Build system for vulnerability scan
        run: |
          nix build .#nixosConfigurations.blazar.config.system.build.toplevel
          echo "SYSTEM_PATH=$(readlink -f result)" >> "$GITHUB_ENV"

      - name: Vulnerability scan
        run: |
          echo "Running vulnerability scan..."
          vulnix --system x86_64-linux --json "$SYSTEM_PATH" > vulnerabilities.json || true
          
          # Generate summary
          vuln_count=$(jq 'length' vulnerabilities.json 2>/dev/null || echo "0")
          critical_count=$(jq '[.[] | select(.severity == "CRITICAL")] | length' vulnerabilities.json 2>/dev/null || echo "0")
          high_count=$(jq '[.[] | select(.severity == "HIGH")] | length' vulnerabilities.json 2>/dev/null || echo "0")
          
          cat > security-summary.md << EOF
          # Security Audit Report
          
          **Total vulnerabilities**: $vuln_count
          **Critical**: $critical_count
          **High**: $high_count
          
          ## Recommendations
          - Update affected packages if possible
          - Consider alternative packages for critical vulnerabilities
          - Review security advisories for context
          EOF
          
          echo "VULN_COUNT=$vuln_count" >> "$GITHUB_ENV"
          echo "CRITICAL_COUNT=$critical_count" >> "$GITHUB_ENV"

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_number }}
          path: |
            vulnerabilities.json
            security-summary.md
          retention-days: 30

      - name: Create security issue
        if: env.CRITICAL_COUNT != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Security Alert: ${process.env.CRITICAL_COUNT} critical vulnerabilities found`,
              body: summary,
              labels: ['security', 'critical', 'automated']
            });
