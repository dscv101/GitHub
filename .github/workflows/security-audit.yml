name: Security Audit

on:
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM UTC
  pull_request:
    paths:
      - 'flake.lock'
      - 'flake.nix'
      - '**/*.nix'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        type: choice
        options:
          - full
          - vulnerabilities-only
          - dependencies-only
        default: full

# SECURITY: Minimal permissions by default
permissions: {}

concurrency:
  group: security-audit-${{ github.ref }}
  cancel-in-progress: true

env:
  NIX_CONFIG: |
    extra-experimental-features = nix-command flakes
    restrict-eval = true
    sandbox = true

jobs:
  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
      issues: write
    outputs:
      has-config: ${{ steps.check-config.outputs.has-config }}
      vuln-count: ${{ steps.vulnerability-scan.outputs.vuln-count }}
      critical-count: ${{ steps.vulnerability-scan.outputs.critical-count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@v3.11.1

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      # ENHANCED: Flake security validation
      - name: Validate flake security
        uses: DeterminateSystems/flake-checker-action@v9
        with:
          fail-mode: false

      - name: Check configuration exists
        id: check-config
        run: |
          if nix eval --json .#nixosConfigurations --option restrict-eval true >/dev/null 2>&1; then
            echo "has-config=true" >> "$GITHUB_OUTPUT"
            echo "✅ NixOS configurations found"
          else
            echo "has-config=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ No NixOS configurations found"
          fi

      # ENHANCED: Comprehensive dependency security audit
      - name: Dependency security audit
        if: github.event.inputs.scan_type != 'vulnerabilities-only'
        run: |
          echo "🔍 Auditing flake dependencies..."
          
          mkdir -p security-reports
          
          # Get flake metadata
          nix flake metadata --json > security-reports/flake-metadata.json
          
          # Analyze input sources
          echo "## Dependency Source Analysis" > security-reports/dependency-audit.md
          echo "" >> security-reports/dependency-audit.md
          
          trusted_sources=0
          untrusted_sources=0
          stale_inputs=0
          current_date=$(date +%s)
          
          while read -r owner repo url type; do
            case "$owner" in
              NixOS|nix-community|cachix|numtide|hercules-ci)
                echo "✅ **Trusted**: $owner/$repo" >> security-reports/dependency-audit.md
                ((trusted_sources++))
                ;;
              *)
                echo "⚠️ **Untrusted**: $owner/$repo - [Review manually]($url)" >> security-reports/dependency-audit.md
                ((untrusted_sources++))
                ;;
            esac
          done < <(jq -r '.locks.nodes[] | select(.original.owner) | "\(.original.owner) \(.original.repo) \(.original.url // .locked.url // "unknown") \(.original.type)"' security-reports/flake-metadata.json 2>/dev/null)
          
          # Check for stale inputs
          echo "" >> security-reports/dependency-audit.md
          echo "## Staleness Analysis" >> security-reports/dependency-audit.md
          echo "" >> security-reports/dependency-audit.md
          
          while read -r input_name last_modified; do
            if [[ "$last_modified" != "null" ]] && [[ -n "$last_modified" ]]; then
              days_old=$(( (current_date - last_modified) / 86400 ))
              if [[ $days_old -gt 30 ]]; then
                echo "⚠️ **$input_name**: $days_old days old (consider updating)" >> security-reports/dependency-audit.md
                ((stale_inputs++))
              elif [[ $days_old -gt 7 ]]; then
                echo "ℹ️ **$input_name**: $days_old days old" >> security-reports/dependency-audit.md
              else
                echo "✅ **$input_name**: Recent ($days_old days)" >> security-reports/dependency-audit.md
              fi
            fi
          done < <(jq -r '.locks.nodes | to_entries[] | select(.value.locked.lastModified) | "\(.key) \(.value.locked.lastModified)"' security-reports/flake-metadata.json 2>/dev/null)
          
          # Summary
          cat >> security-reports/dependency-audit.md << EOF
          
          ## Summary
          - **Trusted sources**: $trusted_sources
          - **Untrusted sources**: $untrusted_sources
          - **Stale inputs (>30 days)**: $stale_inputs
          EOF
          
          echo "Dependency audit completed:"
          echo "  Trusted: $trusted_sources, Untrusted: $untrusted_sources, Stale: $stale_inputs"

      # ENHANCED: Vulnerability scanning
      - name: Vulnerability scan
        if: steps.check-config.outputs.has-config == 'true' && github.event.inputs.scan_type != 'dependencies-only'
        id: vulnerability-scan
        run: |
          echo "🔍 Running vulnerability scan..."
          
          mkdir -p security-reports
          
          # Build system for scanning
          echo "Building system configuration..."
          nix build .#nixosConfigurations.blazar.config.system.build.toplevel --option restrict-eval true
          system_path=$(readlink -f result)
          
          # Run vulnerability scan
          echo "Scanning for vulnerabilities..."
          if vulnix_output=$(nix run nixpkgs#vulnix -- --system x86_64-linux --json "$system_path" 2>security-reports/vulnix-errors.log); then
            echo "$vulnix_output" > security-reports/vulnerabilities.json
            
            # Analyze results
            vuln_count=$(echo "$vulnix_output" | jq 'length' 2>/dev/null || echo "0")
            critical_count=$(echo "$vulnix_output" | jq '[.[] | select(.severity == "CRITICAL" or .severity == "HIGH")] | length' 2>/dev/null || echo "0")
            
            echo "vuln-count=$vuln_count" >> "$GITHUB_OUTPUT"
            echo "critical-count=$critical_count" >> "$GITHUB_OUTPUT"
            
            # Generate human-readable report
            cat > security-reports/vulnerability-report.md << EOF
          # 🔍 Vulnerability Scan Report
          
          **Scan Date**: $(date)
          **System**: x86_64-linux
          **Total Vulnerabilities**: $vuln_count
          **Critical/High Severity**: $critical_count
          
          ## Summary
          EOF
            
            if [[ "$critical_count" -gt 0 ]]; then
              cat >> security-reports/vulnerability-report.md << EOF
          
          ⚠️ **Critical Issues Found**: $critical_count high-severity vulnerabilities detected
          
          ### High-Priority Vulnerabilities
          EOF
              echo "$vulnix_output" | jq -r '.[] | select(.severity == "CRITICAL" or .severity == "HIGH") | "- **\(.product)** (\(.installed_version)): \(.description // "No description")"' >> security-reports/vulnerability-report.md 2>/dev/null || echo "- Error parsing critical vulnerabilities" >> security-reports/vulnerability-report.md
            elif [[ "$vuln_count" -gt 0 ]]; then
              cat >> security-reports/vulnerability-report.md << EOF
          
          ℹ️ **Low-Medium Issues**: $vuln_count total vulnerabilities found (no critical issues)
          
          ### All Vulnerabilities
          EOF
              echo "$vulnix_output" | jq -r '.[] | "- **\(.product)** (\(.installed_version)): \(.severity) - \(.description // "No description")"' >> security-reports/vulnerability-report.md 2>/dev/null || echo "- Error parsing vulnerabilities" >> security-reports/vulnerability-report.md
            else
              cat >> security-reports/vulnerability-report.md << EOF
          
          ✅ **No Vulnerabilities Found**: System appears secure
          EOF
            fi
            
            cat >> security-reports/vulnerability-report.md << EOF
          
          ## Recommendations
          
          $(if [[ "$critical_count" -gt 0 ]]; then
            echo "1. **URGENT**: Address critical vulnerabilities immediately"
            echo "2. Update affected packages to latest versions"
            echo "3. Consider temporary mitigations if updates unavailable"
          elif [[ "$vuln_count" -gt 0 ]]; then
            echo "1. Review and prioritize vulnerability fixes"
            echo "2. Update affected packages when convenient"
            echo "3. Monitor for security advisories"
          else
            echo "1. Continue regular dependency updates"
            echo "2. Monitor security channels for new issues"
            echo "3. Consider security audit schedule"
          fi)
          
          ---
          *Report generated by automated security audit*
          EOF
            
            echo "Vulnerability scan completed: $vuln_count total, $critical_count critical"
          else
            echo "vuln-count=error" >> "$GITHUB_OUTPUT"
            echo "critical-count=error" >> "$GITHUB_OUTPUT"
            echo "❌ Vulnerability scan failed"
            cat security-reports/vulnix-errors.log
          fi

      # ENHANCED: Code security analysis
      - name: Code security analysis
        if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
        run: |
          echo "🔍 Analyzing code security..."
          
          mkdir -p security-reports
          
          # Check for insecure Nix patterns
          cat > security-reports/code-analysis.md << 'EOF'
          # 🔍 Code Security Analysis
          
          ## Nix Security Patterns
          
          EOF
          
          security_issues=0
          
          # Check for unsafe Nix features
          if grep -r "allowUnfree\|allowBroken\|allowInsecure" . --include="*.nix" --exclude-dir=".git" > /tmp/unsafe-features.txt; then
            echo "⚠️ **Unsafe Nix Features Detected**:" >> security-reports/code-analysis.md
            echo '```' >> security-reports/code-analysis.md
            cat /tmp/unsafe-features.txt >> security-reports/code-analysis.md
            echo '```' >> security-reports/code-analysis.md
            ((security_issues++))
          fi
          
          # Check for hardcoded secrets patterns
          if grep -r -i "password\|secret\|key\|token" . --include="*.nix" --exclude-dir=".git" | grep -E "(=|:)" > /tmp/potential-secrets.txt; then
            if [[ -s /tmp/potential-secrets.txt ]]; then
              echo "" >> security-reports/code-analysis.md
              echo "⚠️ **Potential Hardcoded Secrets**:" >> security-reports/code-analysis.md
              echo '```' >> security-reports/code-analysis.md
              head -10 /tmp/potential-secrets.txt >> security-reports/code-analysis.md
              echo '```' >> security-reports/code-analysis.md
              ((security_issues++))
            fi
          fi
          
          # Check for dangerous shell commands
          if grep -r "eval\|exec\|system" . --include="*.nix" --exclude-dir=".git" > /tmp/dangerous-commands.txt; then
            if [[ -s /tmp/dangerous-commands.txt ]]; then
              echo "" >> security-reports/code-analysis.md
              echo "⚠️ **Potentially Dangerous Commands**:" >> security-reports/code-analysis.md
              echo '```' >> security-reports/code-analysis.md
              head -10 /tmp/dangerous-commands.txt >> security-reports/code-analysis.md
              echo '```' >> security-reports/code-analysis.md
              ((security_issues++))
            fi
          fi
          
          # Summary
          echo "" >> security-reports/code-analysis.md
          if [[ $security_issues -eq 0 ]]; then
            echo "✅ **No security issues detected in code analysis**" >> security-reports/code-analysis.md
          else
            echo "⚠️ **$security_issues potential security issues found**" >> security-reports/code-analysis.md
          fi

      # Upload security reports
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@5758c8d99aa7cea1e4a75b12c9d1b8dfa5e8529b # v4.5.0
        with:
          name: security-audit-${{ github.run_number }}
          path: |
            security-reports/
          retention-days: 90
          if-no-files-found: warn

      # Create security issue for critical findings
      - name: Create security issue
        if: steps.vulnerability-scan.outputs.critical-count > 0
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            
            let body = `# 🚨 Critical Security Vulnerabilities Detected
            
            **Scan Date**: ${new Date().toISOString().split('T')[0]}
            **Critical/High Severity**: ${{ steps.vulnerability-scan.outputs.critical-count }}
            **Total Vulnerabilities**: ${{ steps.vulnerability-scan.outputs.vuln-count }}
            
            ## Immediate Action Required
            
            Critical security vulnerabilities have been detected in the system. Please review the attached security report and take immediate action to address these issues.
            
            ## Resources
            - [Security Audit Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Vulnerability Report](Available in workflow artifacts)
            
            ## Next Steps
            1. Download and review the complete security report from workflow artifacts
            2. Prioritize critical vulnerabilities for immediate patching
            3. Update affected packages or apply mitigations
            4. Re-run security audit to verify fixes
            
            ---
            *This issue was automatically created by the security audit workflow*`;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,critical,automated',
              state: 'open'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Critical Security Vulnerabilities Detected')
            );
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## 🔄 Updated Security Scan Results\n\n${body}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Critical Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
                body: body,
                labels: ['security', 'critical', 'automated', 'needs-attention']
              });
            }

      # Generate summary
      - name: Generate security summary
        if: always()
        run: |
          {
            echo "# 🔒 Security Audit Summary"
            echo ""
            echo "## Scan Configuration"
            echo "- **Scan Type**: ${{ github.event.inputs.scan_type || 'full' }}"
            echo "- **Date**: $(date)"
            echo "- **System**: ${{ steps.check-config.outputs.has-config == 'true' && 'NixOS configuration found' || 'No system configuration' }}"
            echo ""
            echo "## Results"
            if [[ "${{ steps.vulnerability-scan.outputs.vuln-count }}" == "error" ]]; then
              echo "- **Vulnerability Scan**: ❌ Failed"
            elif [[ "${{ steps.check-config.outputs.has-config }}" == "true" ]]; then
              echo "- **Total Vulnerabilities**: ${{ steps.vulnerability-scan.outputs.vuln-count || 'unknown' }}"
              echo "- **Critical/High Severity**: ${{ steps.vulnerability-scan.outputs.critical-count || 'unknown' }}"
              if [[ "${{ steps.vulnerability-scan.outputs.critical-count }}" -gt 0 ]]; then
                echo "- **Status**: 🚨 **CRITICAL ISSUES FOUND**"
                echo "- **Action Required**: Immediate attention needed"
              elif [[ "${{ steps.vulnerability-scan.outputs.vuln-count }}" -gt 0 ]]; then
                echo "- **Status**: ⚠️ **VULNERABILITIES FOUND**"
                echo "- **Action Required**: Review and plan fixes"
              else
                echo "- **Status**: ✅ **NO VULNERABILITIES**"
                echo "- **Action Required**: Continue monitoring"
              fi
            else
              echo "- **Vulnerability Scan**: ⏭️ Skipped (no system configuration)"
            fi
            echo ""
            echo "## Security Features Active"
            echo "- ✅ Flake dependency validation"
            echo "- ✅ Source trust verification"
            echo "- ✅ Staleness detection"
            echo "- ✅ Vulnerability scanning"
            echo "- ✅ Code security analysis"
            echo "- ✅ Automated issue creation"
            echo ""
            if [[ "${{ steps.vulnerability-scan.outputs.critical-count }}" -gt 0 ]]; then
              echo "⚠️ **URGENT**: Critical vulnerabilities detected - security issue created"
            elif [[ "${{ steps.vulnerability-scan.outputs.vuln-count }}" -gt 0 ]]; then
              echo "ℹ️ **INFO**: Some vulnerabilities found - review recommended"
            else
              echo "✅ **STATUS**: Security audit completed - no critical issues"
            fi
            echo ""
            echo "---"
            echo "*Comprehensive security audit using industry best practices*"
          } >> "$GITHUB_STEP_SUMMARY"
