name: Cache Management

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      force_push:
        description: 'Force push to cache even on PR'
        required: false
        default: false
        type: boolean
      cache_targets:
        description: 'Specific targets to cache (comma-separated)'
        required: false
        default: 'all'
        type: string

# SECURITY: Minimal permissions by default
permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # SECURITY: Secure Nix evaluation
  NIX_CONFIG: |
    extra-experimental-features = nix-command flakes
    sandbox = true
    max-jobs = auto

jobs:
  # Validate cache configuration
  validate-cache-config:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    outputs:
      cache-configured: ${{ steps.check-config.outputs.configured }}
      has-secrets: ${{ steps.check-config.outputs.has-secrets }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@87b14cf437d03d37989d87f0fa5ce4f5dc1a330b # v8

      - name: Check cache configuration
        id: check-config
        run: |
          echo "🔍 Validating cache configuration..."
          
          # Check if flake.nix has cache configuration
          if grep -q "nix-blazar.cachix.org" flake.nix; then
            echo "configured=true" >> "$GITHUB_OUTPUT"
            echo "✅ Cache configuration found in flake.nix"
          else
            echo "configured=false" >> "$GITHUB_OUTPUT"
            echo "❌ Cache configuration missing in flake.nix"
          fi
          
          # Check if secrets are configured (we can't access them, just check if they exist)
          if [[ -n "${{ secrets.CACHIX_AUTH_TOKEN }}" ]]; then
            echo "has-secrets=true" >> "$GITHUB_OUTPUT"
            echo "✅ Cache authentication secrets available"
          else
            echo "has-secrets=false" >> "$GITHUB_OUTPUT"
            echo "⚠️ Cache authentication secrets not configured"
          fi

  # Build and cache custom packages
  cache-packages:
    runs-on: ubuntu-latest
    needs: validate-cache-config
    if: needs.validate-cache-config.outputs.cache-configured == 'true'
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@87b14cf437d03d37989d87f0fa5ce4f5dc1a330b # v8

      - name: Setup Cachix
        uses: cachix/cachix-action@18cf96c7c98e048e10a83abd92116114cd8504be # v14
        if: needs.validate-cache-config.outputs.has-secrets == 'true'
        with:
          name: nix-blazar
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

      - name: Build and cache custom packages
        run: |
          echo "🏗️ Building custom packages..."
          
          # Build all custom packages
          if nix eval --json "$PWD#packages.x86_64-linux" >/dev/null 2>&1; then
            packages=$(nix eval --json "$PWD#packages.x86_64-linux" | nix run nixpkgs#jq -- -r 'keys[]')
            
            for package in $packages; do
              echo "Building package: $package"
              nix build "$PWD#packages.x86_64-linux.$package" \
                --print-build-logs \
                --option sandbox true \
                --option max-silent-time 600
              
              # Push to cache if on main branch and secrets available
              if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.validate-cache-config.outputs.has-secrets }}" == "true" ]]; then
                echo "Pushing $package to cache..."
                nix store sign --key-file <(echo "${{ secrets.CACHIX_SIGNING_KEY }}") result
                cachix push nix-blazar result
              fi
            done
          else
            echo "No custom packages found"
          fi

  # Build and cache development shells
  cache-devshells:
    runs-on: ubuntu-latest
    needs: validate-cache-config
    if: needs.validate-cache-config.outputs.cache-configured == 'true'
    timeout-minutes: 45
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@87b14cf437d03d37989d87f0fa5ce4f5dc1a330b # v8

      - name: Setup Cachix
        uses: cachix/cachix-action@18cf96c7c98e048e10a83abd92116114cd8504be # v14
        if: needs.validate-cache-config.outputs.has-secrets == 'true'
        with:
          name: nix-blazar
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

      - name: Build and cache development shells
        run: |
          echo "🧪 Building development shells..."

          # Note: Devenv shells are not exposed as flake outputs, so we skip building them
          # They will be built on-demand when needed
          echo "ℹ️ Skipping devenv shell builds - shells are built on-demand"
          echo "✅ Development environment caching handled by devenv"

  # Build and cache system configurations
  cache-system:
    runs-on: ubuntu-latest
    needs: validate-cache-config
    if: needs.validate-cache-config.outputs.cache-configured == 'true'
    timeout-minutes: 60
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@a7e500c712ad97316904566d98013596e868d2fb # v3.11.1

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@87b14cf437d03d37989d87f0fa5ce4f5dc1a330b # v8

      - name: Setup Cachix
        uses: cachix/cachix-action@18cf96c7c98e048e10a83abd92116114cd8504be # v14
        if: needs.validate-cache-config.outputs.has-secrets == 'true'
        with:
          name: nix-blazar
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

      - name: Build and cache system configurations
        run: |
          echo "🏗️ Building system configurations..."
          
          # Check if nixosConfigurations exist
          if nix eval --json .#nixosConfigurations >/dev/null 2>&1; then
            configs=$(nix eval --json .#nixosConfigurations | nix run nixpkgs#jq -- -r 'keys[]')
            
            for config in $configs; do
              echo "Building NixOS configuration: $config"
              nix build ".#nixosConfigurations.$config.config.system.build.toplevel" \
                --print-build-logs \
                --option sandbox true \
                --option max-silent-time 900 \
                --option timeout 3600
              
              # Push to cache if on main branch and secrets available
              if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.validate-cache-config.outputs.has-secrets }}" == "true" ]]; then
                echo "Pushing $config system to cache..."
                nix store sign --key-file <(echo "${{ secrets.CACHIX_SIGNING_KEY }}") result
                cachix push nix-blazar result
              fi
            done
          else
            echo "No NixOS configurations found"
          fi

  # Cache summary
  cache-summary:
    runs-on: ubuntu-latest
    needs: [validate-cache-config, cache-packages, cache-devshells, cache-system]
    if: always()
    permissions:
      contents: read
    steps:
      - name: Generate cache summary
        run: |
          {
            echo "# 🗄️ Cache Management Summary"
            echo ""
            echo "## Configuration Status"
            echo "- **Cache configured**: ${{ needs.validate-cache-config.outputs.cache-configured == 'true' && '✅ Yes' || '❌ No' }}"
            echo "- **Secrets available**: ${{ needs.validate-cache-config.outputs.has-secrets == 'true' && '✅ Yes' || '❌ No' }}"
            echo ""
            echo "## Build Results"
            echo "- **Custom packages**: ${{ needs.cache-packages.result == 'success' && '✅ Cached' || needs.cache-packages.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}"
            echo "- **Development shells**: ${{ needs.cache-devshells.result == 'success' && '✅ Cached' || needs.cache-devshells.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}"
            echo "- **System configurations**: ${{ needs.cache-system.result == 'success' && '✅ Cached' || needs.cache-system.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}"
            echo ""
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "## Cache Push Status"
              if [[ "${{ needs.validate-cache-config.outputs.has-secrets }}" == "true" ]]; then
                echo "✅ Builds pushed to private cache (main branch)"
              else
                echo "⚠️ Cache secrets not configured - builds not pushed"
              fi
            else
              echo "## Cache Push Status"
              echo "ℹ️ Builds not pushed (not main branch)"
            fi
            echo ""
            echo "---"
            echo "*Private binary cache for faster rebuilds*"
          } >> "$GITHUB_STEP_SUMMARY"
